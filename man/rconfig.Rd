% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/config.R, R/package.R
\docType{package}
\name{rconfig}
\alias{rconfig}
\title{Merged configuration}
\usage{
rconfig(file = NULL, list = NULL)
}
\arguments{
\item{file}{Configuration file name or URL (\code{NULL} to not use
this configuration file to override the default behavior).}

\item{list}{A list to override other configs (\code{NULL} to not use
this list to override the default behavior).

Configurations are merged in the following order
(key-values from last element override previous values for the same key):
\enumerate{
\item \code{R_RCONFIG_FILE} value or \code{"config.yml"}
\item JSON strings (following \code{-j} and \code{--json} flags)
and files (following \code{-f} and \code{--file} flags)
provided as command line arguments are parsed and applied
in the order they appear (key-value pars are separated by space,
only a atomic values considered, i.e. file name or string)
\item the remaining other command line arguments, period-separated
command line flags are parsed as hierarchical lists
(key-value pars are separated by space, flags must begin
with \verb{--}, values are treated as vectors when contain spaces)
\item configuration from the \code{file} argument
\item configuration from the \code{list} argument
}

The following environment variables and options can be set to
modify the default behavior:
\itemize{
\item \code{R_RCONFIG_FILE}: location of the default configuration file,
it is assumed to be \code{config.yml} in the current working directory.
The file name can be an URL or it can can be missing.
\item \code{R_RCONFIG_EVAL}: coerced to logical, indicating whether
R expressions starting with \code{!expr} should be evaluated in the
namespace environment for the base package
(overrides the value of \code{getOption("rconfig.eval")}).
When not set the value is \code{TRUE}.
\item \code{R_RCONFIG_SEP}: separator for text file parser,
(overrides the value of \code{getOption("rconfig.sep")}).
When not set the value is \code{"="}.
}

When the configuration is a file (file name can also be a URL),
it can be nested structure in JSON, YAML format.
Other text files are parsed using the
separator (\code{R_RCONFIG_SEP} or \code{getOption("rconfig.sep")}) and
period-separated keys are parsed as hierarchical lists
(i.e. \code{a.b.c=12} is treated as \code{a$b$c = 12}).

When the configuration is a file or a JSON string,
values starting with \code{!expr} will be evaluated depending on the
settings \code{R_RCONFIG_EVAL} and \code{getOption("rconfig.eval")}.
E.g. \verb{cores: !expr getOption("mc.cores")}, etc.

For additional details see the package website at
\href{https://github.com/analythium/rconfig}{https://github.com/analythium/rconfig}.}
}
\value{
The configuration value (a named list, or an empty list).
The \code{"rconfig"} attribute traces the merged configurations.
}
\description{
Parses files, JSON strings, and command line arguments for configuration.

Manage R configuration using files (JSON, YAML, separated text)
JSON strings and command line arguments. Command line arguments
can be used to override configuration. Period-separated command line
flags are parsed as hierarchical lists.
}
\details{
The main function is \code{\link[=rconfig]{rconfig()}}

For additional details see the package website at
\href{https://github.com/analythium/rconfig}{https://github.com/analythium/rconfig}.
}
\seealso{
\code{\link[utils:modifyList]{utils::modifyList()}}
}
