[{"path":"https://hub.analythium.io/rconfig/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Analythium Solutions Inc.. Copyright holder, funder.","code":""},{"path":"https://hub.analythium.io/rconfig/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P (2023). rconfig: Manage R Configuration Command Line. R package version 0.3.0, https://github.com/analythium/rconfig.","code":"@Manual{,   title = {rconfig: Manage R Configuration at the Command Line},   author = {Peter Solymos},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/analythium/rconfig}, }"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"rconfig","dir":"","previous_headings":"","what":"rconfig: Manage R Configuration at the Command Line","title":"rconfig: Manage R Configuration at the Command Line","text":"Manage R Configuration Command Line  Manage R configuration using files (YAML, JSON, INI, TXT) JSON strings command line arguments. Command line arguments can used override configuration. Period-separated command line flags parsed hierarchical lists. Environment variables, R global variables, configuration values can substituted. Try rconfig browser: click Gitpod button, cd inst/examples VS Code terminal run Rscript example README!  Install Another config package? R command line usage Variable substitution Using Rscript Shiny Plumber License","code":""},{"path":"https://hub.analythium.io/rconfig/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"rconfig: Manage R Configuration at the Command Line","text":"","code":"# CRAN version install.packages(\"rconfig\")  # Development version from R-universe install.packages(\"rconfig\", repos = \"https://analythium.r-universe.dev\")"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"another-config-package","dir":"","previous_headings":"","what":"Another config package?","title":"rconfig: Manage R Configuration at the Command Line","text":"R packages manage configs: config nice inheritance rules, even scans parent directories YAML config files configr nice substitution/interpolation features supports YAML, JSON, TOML, INI file formats package fantastic managing deployments different stages life cycle, .e. testing/staging/production. However, use Rscript command line, often want manage many configuration files, want quick way override default settings. rconfig package provides various ways override defaults, instead changing active configuration (config package), can merge lists order arrive final configuration. similar concepts, quite . rconfig package following features: uses default configuration file file based override -f --file flags (accepts JSON, YAML, INI, plain text files) JSON string based override -j --json flags command line arguments merged , e.g. --cores 4 heuristic rules used coerce command line values right type R expressions starting !expr evaluated default, behavior can turned (feature can found yaml config packages, works plain text JSON ) period-separated command line arguments parsed hierarchical lists, e.g. --user.name Joe added user$name config list nested configurations can also flattened command line flags without value evaluate TRUE, e.g. --verbose environment variables (${VALUE}), R global variables (@{VALUE}), configuration values (#{VALUE}) can substituted differentiates verb/noun syntax, verbs sub-commands following R script file name preceding command line flags (starting - --) looks similar littler, getopt, optparse supposed . right. packages offer amazing command line experience solid interface. iterative evolving research development situation, however, rconfig gives agility. Moreover, rconfig package offers various ways substituting environment variables, R global variables, even substituting configuration values. GetoptLong package similar functionality focus command line interfaces configuration. tools, sprintf, glue, rprintf, whiskers aimed substituting values R expressions. yet convinced, quick teaser. content default configuration file, rconfig.yml: Let’s use simple R script print configs: Now can override default configuration using another file, JSON string, flags. Notice variable substitution user name! package inspired config package, docker-compose/kubectl/caddy CLI tools, motivated real world need managing background processing cloud instances.","code":"trials: 5 dataset: \"demo-data.csv\" cores: !expr getOption(\"mc.cores\", 1L) user:   name: \"demo\" description: |   This is a multi line   description. #!/usr/bin/env Rscript options(\"rconfig.debug\"=TRUE) str(rconfig::rconfig()) export USER=Jane  Rscript --vanilla test.R deploy \\   -f rconfig-prod.yml \\   -j '{\"trials\":30,\"dataset\":\"full-data.csv\"}' \\   --user.name $USER \\   --verbose # List of 6 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"Jane\" #  $ description: chr \"This is a multi line\\ndescription.\" #  $ verbose    : logi TRUE #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 4 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig-prod.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"json\" #   .. .. ..$ value: chr \"{\\\"trials\\\":30,\\\"dataset\\\":\\\"full-data.csv\\\"}\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"deploy --user.name Jane --verbose\" #  - attr(*, \"command\")= chr \"deploy\" #  - attr(*, \"class\")= chr \"rconfig\""},{"path":[]},{"path":"https://hub.analythium.io/rconfig/index.html","id":"r-command-line-usage","dir":"","previous_headings":"Usage","what":"R command line usage","title":"rconfig: Manage R Configuration at the Command Line","text":"Open project RStudio set work directory folder root cloning/downloading repository. Set defaults case values undefined: default values used ensure type safety: Using alongside config package:","code":"str(rconfig::rconfig()) # List of 5 #  $ trials     : int 5 #  $ dataset    : chr \"demo-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"demo\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = \"rconfig-prod.yml\")) # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = c(\"rconfig.json\",              \"rconfig-prod.txt\"),     list = list(user = list(name = \"Jack\")))) # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"Jack\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = c(\"rconfig.json\",              \"rconfig-prod.txt\"),     list = list(user = list(name = \"Jack\")),     flatten = TRUE)) # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user.name  : chr \"Jack\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" CONFIG <- rconfig::rconfig(     file = \"rconfig-prod.yml\")  rconfig::value(CONFIG$cores, 2L)   # set to 1L # [1] 1 rconfig::value(CONFIG$test)        # unset # NULL rconfig::value(CONFIG$test, FALSE) # use default # [1] FALSE str(rconfig::value(CONFIG$trials, 0L))    # integer #  int 30 str(rconfig::value(CONFIG$trials, 0))     # numeric #  num 30 str(rconfig::value(CONFIG$trials, \"0\"))   # character #  chr \"30\" str(rconfig::value(CONFIG$trials, FALSE)) # logical #  logi TRUE conf <- config::get(     config = \"production\",     file = \"config.yml\",     use_parent = FALSE)  str(rconfig::rconfig(     file = \"rconfig.yml\",     list = conf)) # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"demo\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\""},{"path":"https://hub.analythium.io/rconfig/index.html","id":"variable-substitution","dir":"","previous_headings":"Usage","what":"Variable substitution","title":"rconfig: Manage R Configuration at the Command Line","text":"rconfig package interprets 3 kinds substitution patterns: environment variables (${VALUE}): variables already present configurations read calling environment .Renviron file project specific home folder, set variables can null -null R global variables (@{VALUE}): rconfig package looks variables global environment time configuration evaluation, however, expressions evaluated (unlike !expr option values) configuration values (#{VALUE}): configuration level variables evaluated last, thus values can refer existing keys already substituted substitution pattern can set defaults error messages, following bash Docker conventions: following YAML example 3 kinds variable substitution pattern: Set following variables: substituted version:","code":"trials: 30 unset: this-is-null: \"\" env:   dataset: \"full-${DATA:-data}.csv\"   url: \"https://www.${URL-example}.com\"   user:     name: \"${USER:?Define user name}\"     access: \"${ACCESS?Define user access}\" conf:   path: \"#{env.url}/api/v1/\"   text: \"User: #{env.user.name} (#{env.user.access})\"   lang: \"#{renv.lang}\" renv:   lang: \"@{Lang:-EN}\"   type: \"@{Type?Type must be set}\" Sys.setenv(USER=\"Adele\") Sys.setenv(ACCESS=\"admin\") Type <- \"simple\" Lang <- \"HU\" trials: 30 this-is-null: '' env:   dataset: full-data.csv   url: https://www.example.com   user:     name: Adele     access: admin conf:   path: https://www.example.com/api/v1/   text: 'User: Adele (admin)'   lang: HU renv:   lang: HU   type: simple"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"using-with-rscript","dir":"","previous_headings":"Usage","what":"Using with Rscript","title":"rconfig: Manage R Configuration at the Command Line","text":"Set work directory inst/examples folder cloning/downloading repo. Default config found (script debug mode ): Default debug mode : Change default config file: Change default config file debug : Use file props override default: Use JSON string props override default: rconfig also interprets verb/noun syntax, verbs sub-commands following R script file name preceding command line flags (starting - --): realistic still small example, let’s use iris data get summaries species using command line arguments: Check iris_rlog.R file see example proper logging. Another illustration using mtcars data set fit linear models different variables: Let’s see use sub-commands: make R script executable Linux (course ’ll need rconfig installed work): Make sure R script shebang (#!/usr/bin/env Rscript) 1st line, now can drop Rscript part use script commands.R model.","code":"Rscript test.R # List of 5 #  $ trials     : int 5 #  $ dataset    : chr \"demo-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"demo\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"file\" #   ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig.yml\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R # List of 5 #  $ trials     : int 5 #  $ dataset    : chr \"demo-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"demo\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_FILE=\"rconfig-prod.yml\" Rscript test.R # List of 3 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ user   :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"file\" #   ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig-prod.yml\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_FILE=\"rconfig-prod.yml\" R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R # List of 3 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ user   :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" Rscript test.R -f rconfig-prod.yml --user.name \"unreal_Zh5z*$#=\" # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"unreal_Zh5z*0=\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 3 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig-prod.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"--user.name unreal_Zh5z*0=\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" Rscript test.R \\   -j '{\"trials\":30,\"dataset\":\"full-data.csv\",\"user\":{\"name\": \"real_We4$#z*=\"}}' \\   --user.name \"unreal_Zh5z*$#=\" # List of 5 #  $ trials     : int 30 #  $ dataset    : chr \"full-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"unreal_Zh5z*0=\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 3 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"json\" #   .. .. ..$ value: chr \"{\\\"trials\\\":30,\\\"dataset\\\":\\\"full-data.csv\\\",\\\"user\\\":{\\\"name\\\": \\\"real_We4$#z*=\\\"}}\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"--user.name unreal_Zh5z*0=\" #  - attr(*, \"command\")= chr(0)  #  - attr(*, \"class\")= chr \"rconfig\" Rscript test.R deploy --user.name \"unreal_Zh5z*$#=\" # List of 5 #  $ trials     : int 5 #  $ dataset    : chr \"demo-data.csv\" #  $ cores      : int 1 #  $ user       :List of 1 #   ..$ name: chr \"unreal_Zh5z*0=\" #  $ description: chr \"This is a multi line\\ndescription.\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 2 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/git/github.com/analythium/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"deploy --user.name unreal_Zh5z*0=\" #  - attr(*, \"command\")= chr \"deploy\" #  - attr(*, \"class\")= chr \"rconfig\" Rscript iris.R --species virginica #   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #  Min.   :4.900   Min.   :2.200   Min.   :4.500   Min.   :1.400   #  1st Qu.:6.225   1st Qu.:2.800   1st Qu.:5.100   1st Qu.:1.800   #  Median :6.500   Median :3.000   Median :5.550   Median :2.000   #  Mean   :6.588   Mean   :2.974   Mean   :5.552   Mean   :2.026   #  3rd Qu.:6.900   3rd Qu.:3.175   3rd Qu.:5.875   3rd Qu.:2.300   #  Max.   :7.900   Max.   :3.800   Max.   :6.900   Max.   :2.500 Rscript iris.R --species setosa --verbose # 2023-06-26 22:27:09 - Started # Getting summaries for species setosa #   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #  Min.   :4.300   Min.   :2.300   Min.   :1.000   Min.   :0.100   #  1st Qu.:4.800   1st Qu.:3.200   1st Qu.:1.400   1st Qu.:0.200   #  Median :5.000   Median :3.400   Median :1.500   Median :0.200   #  Mean   :5.006   Mean   :3.428   Mean   :1.462   Mean   :0.246   #  3rd Qu.:5.200   3rd Qu.:3.675   3rd Qu.:1.575   3rd Qu.:0.300   #  Max.   :5.800   Max.   :4.400   Max.   :1.900   Max.   :0.600   # 2023-06-26 22:27:09 - Done Rscript iris.R --species maxima --verbose # 2023-06-26 22:27:09 - Started # Error: Provide a valid species # Execution halted Rscript iris.R # Error: Species not provided # Execution halted Rscript mtcars.R # (Intercept)         cyl        disp          hp        drat          wt  # 12.30337416 -0.11144048  0.01333524 -0.02148212  0.78711097 -3.71530393  #        qsec          vs          am        gear        carb  #  0.82104075  0.31776281  2.52022689  0.65541302 -0.19941925 Rscript mtcars.R --verbose --vars cyl # 2023-06-26 22:27:09 - Started # (Intercept)         cyl  #    37.88458    -2.87579  # 2023-06-26 22:27:09 - Done Rscript mtcars.R --verbose --vars cal # 2023-06-26 22:27:09 - Started # Error: Not valid variable # Execution halted Rscript mtcars.R --vars cyl disp hp # (Intercept)         cyl        disp          hp  # 34.18491917 -1.22741994 -0.01883809 -0.01467933 ## This will print messages: Rscript commands.R model  ## This will not print messages: Rscript commands.R model --silent # Model ... Rscript commands.R predict # Predict ... Rscript commands.R fit # Error: Command fit not found. # Execution halted Rscript commands.R # Error: Specify a command. # Execution halted sudo cp ./inst/examples/commands.R /usr/local/bin/ sudo chmod +x /usr/local/bin/commands.R"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"shiny","dir":"","previous_headings":"Usage","what":"Shiny","title":"rconfig: Manage R Configuration at the Command Line","text":"example configure Shiny app command line flags: example configure Shiny app using golem command line flags:","code":"Rscript shiny/app.R  Rscript shiny/app.R \\   --test \\   --value 1000 \\   --color 'pink' \\   --title 'Only Testing' # app.R CONFIG <- rconfig() yourpkg::run_app(   title = value(CONFIG$title, \"Hello Shiny!\"),   test = value(CONFIG$test, FALSE),   color = value(CONFIG$color, \"purple\"),   options = list(port = value(CONFIG$port, 8080))) ## then in terminal Rscript app.R \\   --test \\   --value 1000 \\   --color 'pink' \\   --title 'Only Testing' \\   --port 3838"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"plumber","dir":"","previous_headings":"Usage","what":"Plumber","title":"rconfig: Manage R Configuration at the Command Line","text":"example configure Plumber API command line flags:","code":"cd plumber  Rscript index.R  # httr::POST(\"http://127.0.0.1:8080/echo?msg=Cool\") |> httr::content() # httr::GET(\"http://127.0.0.1:8080/test\") |> httr::content()  Rscript index.R \\   --test \\   --port 8000 \\   --title 'The echoed message is'  # httr::POST(\"http://127.0.0.1:8000/echo?msg=Cool\") |> httr::content() # httr::GET(\"http://127.0.0.1:8000/test\") |> httr::content()"},{"path":"https://hub.analythium.io/rconfig/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"rconfig: Manage R Configuration at the Command Line","text":"MIT License © 2022 Peter Solymos Analythium Solutions Inc.","code":""},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage R Configuration at the Command Line — rconfig","title":"Manage R Configuration at the Command Line — rconfig","text":"Manage R configuration using files (YAML, JSON, INI, TXT) JSON strings command line arguments. Command line arguments can used provide commands override configuration. Period-separated command line flags parsed hierarchical lists.","code":""},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"rconfig(   file = NULL,   list = NULL,   eval = NULL,   flatten = NULL,   debug = NULL,   sep = NULL,   sub = NULL,   ... )  value(x, ...)  # S3 method for default value(x, default = NULL, coerce = TRUE, ...)  command(x, ...)  # S3 method for default command(x, ...)"},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage R Configuration at the Command Line — rconfig","text":"file Configuration file name URL (NULL use configuration file override default behavior). Can vector, case element treated configuration file, parsed applied order appear. list list override configs (NULL use list override default behavior). argument treated single configuration (opposed file). List names need unique. eval Logical, evaluate !expr R expressions. flatten Logical, config contain nested lists results flat, .e. $b$c flattened key .b.c; like unlist() returning list preserving value types. debug Logical, debug mode configuration source information attached \"trace\" attribute. sep Character, separator text files. sub Logical, substitute environment variables (see Details). ... arguments passed file parsers: yaml::yaml.load_file() YAML, jsonlite::fromJSON() JSON, utils::read.table() text files. x list, e.g. rconfig() output. default default value used configuration entry set. coerce Logical, values x coerced type storage.mode(default).","code":""},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage R Configuration at the Command Line — rconfig","text":"configuration value (named list, empty list). debug mode , \"trace\" attribute traces merged configurations. value() method returns value given argument default value found (.e. NULL). command() method returns character vector command line sub-commands (can length 0).","code":""},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage R Configuration at the Command Line — rconfig","text":"Merges configuration parsing files, JSON strings, command line arguments. Note rconfig considers trailing command line arguments Rscript. rconfig differentiates verb/noun syntax, verbs sub-commands following R script file name preceding command line flags (starting - --). Configurations merged following order (key-values last element override previous values key): R_RCONFIG_FILE value \"rconfig.yml\" working directory JSON strings (following -j --json flags) files (following -f --file flags) provided command line arguments parsed applied order appear (key-value pairs separated space, atomic values considered, .e. file name string) flag, multiple file/JSON flags accepted sequence remaining command line arguments, can sub-commands command line flags (starting - --), period-separated command line flags parsed hierarchical lists (key-value pairs separated space, flags must begin --, values treated vectors contain spaces, .e. --key 1 2 3) configuration file argument (one multiple files, parsed applied order appear) configuration list argument following environment variables options can set modify default behavior: R_RCONFIG_FILE: location default configuration file, assumed rconfig.yml current working directory. file name can URL can can missing. R_RCONFIG_EVAL: coerced logical, indicating whether R expressions starting !expr evaluated namespace environment base package (overrides value getOption(\"rconfig.eval\")). set value assumed TRUE. R_RCONFIG_SUB: coerced logical, indicating whether environment variables substituted (overrides value getOption(\"rconfig.sub\")). set value assumed TRUE. R_RCONFIG_FLATTEN: coerced logical, flatten nested lists, .e. $b$c becomes key .b.c (overrides value getOption(\"rconfig.flatten\")). set value assumed FALSE. R_RCONFIG_DEBUG: coerced logical, turn debug mode (overrides value getOption(\"rconfig.debug\")). set value assumed FALSE. R_RCONFIG_SEP: separator text file parser, (overrides value getOption(\"rconfig.sep\")). set value assumed \"=\". configuration file (file name can also URL), can nested structure JSON YAML format. text files parsed using separator (R_RCONFIG_SEP getOption(\"rconfig.sep\")) period-separated keys parsed hierarchical lists (.e. .b.c=12 treated $b$c = 12) default. configuration file JSON string, values starting !expr evaluated depending settings R_RCONFIG_EVAL getOption(\"rconfig.eval\"). E.g. cores: !expr getOption(\"mc.cores\"), etc. rconfig package interprets 3 kinds substitution patterns: environment variables (${VALUE}): variables already present configurations read calling environment .Renviron file project specific home folder, set variables can null -null R global variables (@{VALUE}): rconfig package looks variables global environment time configuration evaluation, however, expressions evaluated (unlike !expr option values) configuration values (#{VALUE}): configuration level variables evaluated last, thus values can refer existing keys already substituted additional details see package website https://github.com/analythium/rconfig.","code":""},{"path":[]},{"path":"https://hub.analythium.io/rconfig/reference/rconfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"cfile <- function(file) {     system.file(\"examples\", file, package = \"rconfig\") }  rconfig::rconfig() #> list() #> attr(,\"command\") #> character(0) #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = cfile(\"rconfig.yml\")) #> $trials #> [1] 5 #>  #> $dataset #> [1] \"demo-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"demo\" #>  #>  #> $description #> [1] \"This is a multi line\\ndescription.\" #>  #> attr(,\"command\") #> character(0) #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\"))) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"Jack\" #>  #>  #> attr(,\"command\") #> character(0) #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\")),     flatten = TRUE) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user.name #> [1] \"Jack\" #>  #> attr(,\"command\") #> character(0) #> attr(,\"class\") #> [1] \"rconfig\"  CONFIG <- rconfig::rconfig(     file = cfile(\"rconfig.yml\")) value(CONFIG$cores, 2L)   # set to 1L #> [1] 1 value(CONFIG$test, FALSE) # unset #> [1] FALSE"},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":null,"dir":"Reference","previous_headings":"","what":"Read INI Files — read_ini","title":"Read INI Files — read_ini","text":"Read INI (.ini file extension) configuration files.","code":""},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read INI Files — read_ini","text":"","code":"read_ini(file, ...)"},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read INI Files — read_ini","text":"file name path INI configuration file. ... arguments passed function (currently none).","code":""},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read INI Files — read_ini","text":"configuration value named list, element list section INI file. element (section) containing key-value pairs INI file. value provided file, value \"\". convention, values returned function character type. R expressions following !expr evaluated according settings R_RCONFIG_EVAL environment variable option \"rconfig.eval\".","code":""},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read INI Files — read_ini","text":"INI configuration file consists sections, led [section] header, followed key/value entries separated specific string (= : default). default, section names case sensitive keys . Leading trailing whitespace removed keys values. Values can omitted parser configured allow , case key/value delimiter may also left . Values can also span multiple lines, long indented deeper first line value. Blank lines may treated parts multiline values ignored. default, valid section name can string contain \\n ]. Configuration files may include comments, prefixed specific characters (# ; default). Comments may appear otherwise empty line, possibly indented.","code":""},{"path":"https://hub.analythium.io/rconfig/reference/read_ini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read INI Files — read_ini","text":"","code":"inifile <- system.file(\"examples\", \"example.ini\", package = \"rconfig\")  ## not evaluating R expressions op <- options(\"rconfig.eval\" = FALSE) ini <- rconfig::read_ini(file = inifile) str(ini) #> List of 7 #>  $ Simple Values           :List of 5 #>   ..$ key                        : chr \"value\" #>   ..$ spaces in keys             : chr \"allowed\" #>   ..$ spaces in values           : chr \"allowed as well\" #>   ..$ spaces around the delimiter: chr \"obviously\" #>   ..$ you can also use           : chr \"to delimit keys from values\" #>  $ All Values Are Strings  :List of 5 #>   ..$ values like this                                : int 1000000 #>   ..$ or this                                         : num 3.14 #>   ..$ are they treated as numbers?                    : chr \"no\" #>   ..$ integers, floats and booleans are held as       : chr \"strings\" #>   ..$ can use the API to get converted values directly: logi TRUE #>  $ Multiline Values        :List of 1 #>   ..$ chorus: chr [1:2] \"I'm a lumberjack, and I'm okay\" \"I sleep all night and I work all day\" #>  $ No Values               :List of 2 #>   ..$ key_without_value      : chr \"\" #>   ..$ empty string value here: chr \"\" #>  $ You can use comments    : list() #>  $ Sections Can Be Indented:List of 4 #>   ..$ can_values_be_as_well          : logi TRUE #>   ..$ does_that_mean_anything_special: logi FALSE #>   ..$ purpose                        : chr \"formatting for readability\" #>   ..$ multiline_values               : chr [1:5] \"are\" \"handled just fine as\" \"long as they are indented\" \"deeper than the first line\" ... #>  $ R specific pieces       :List of 4 #>   ..$ trials : int 5 #>   ..$ pi     : num 3.14 #>   ..$ dataset: chr \"demo-data.csv\" #>   ..$ cores  : chr \"!expr getOption(\\\"mc.cores\\\", 1L)\"  ## evaluating R expressions options(\"rconfig.eval\" = TRUE) ini <- rconfig::read_ini(file = inifile) str(ini) #> List of 7 #>  $ Simple Values           :List of 5 #>   ..$ key                        : chr \"value\" #>   ..$ spaces in keys             : chr \"allowed\" #>   ..$ spaces in values           : chr \"allowed as well\" #>   ..$ spaces around the delimiter: chr \"obviously\" #>   ..$ you can also use           : chr \"to delimit keys from values\" #>  $ All Values Are Strings  :List of 5 #>   ..$ values like this                                : int 1000000 #>   ..$ or this                                         : num 3.14 #>   ..$ are they treated as numbers?                    : chr \"no\" #>   ..$ integers, floats and booleans are held as       : chr \"strings\" #>   ..$ can use the API to get converted values directly: logi TRUE #>  $ Multiline Values        :List of 1 #>   ..$ chorus: chr [1:2] \"I'm a lumberjack, and I'm okay\" \"I sleep all night and I work all day\" #>  $ No Values               :List of 2 #>   ..$ key_without_value      : chr \"\" #>   ..$ empty string value here: chr \"\" #>  $ You can use comments    : list() #>  $ Sections Can Be Indented:List of 4 #>   ..$ can_values_be_as_well          : logi TRUE #>   ..$ does_that_mean_anything_special: logi FALSE #>   ..$ purpose                        : chr \"formatting for readability\" #>   ..$ multiline_values               : chr [1:5] \"are\" \"handled just fine as\" \"long as they are indented\" \"deeper than the first line\" ... #>  $ R specific pieces       :List of 4 #>   ..$ trials : int 5 #>   ..$ pi     : num 3.14 #>   ..$ dataset: chr \"demo-data.csv\" #>   ..$ cores  : int 1  # reset options options(op)"},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"Variable splitting consider separator right hand side, now fixed. Added new function read_ini read INI configuration files.","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"CRAN release: 2023-02-11 Added functionality substitute variables (#8). Nicer formatting markdown code blocks (#10 @eitsupi).","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.1.5","title":"Version 0.1.5","text":"CRAN release: 2022-11-02 Update date field (Date field month old).","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-014","dir":"Changelog","previous_headings":"","what":"Version 0.1.4","title":"Version 0.1.4","text":"value() default coerces config value storage type default value default value NULL.","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-013","dir":"Changelog","previous_headings":"","what":"Version 0.1.3","title":"Version 0.1.3","text":"CRAN release: 2022-06-22 Empty flag invalid throws error (#3). Allow verb arguments sub-commands command() method access within scripts (#4).","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.1.2","title":"Version 0.1.2","text":"CRAN release: 2022-04-15 Added value() method (#2).","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"CRAN release: 2022-02-21 Added LICENSE.md explicit MIT text LICENSE 2 lines .","code":""},{"path":"https://hub.analythium.io/rconfig/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"First (failed) CRAN submission.","code":""}]
