[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P, Inc. (2022). rconfig: Manage R Configuration Command Line. R package version 0.0.1.","code":"@Manual{,   title = {rconfig: Manage R Configuration at the Command Line},   author = {Peter Solymos and Analythium Solutions Inc.},   year = {2022},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"rconfig","dir":"","previous_headings":"","what":"Manage R Configuration at the Command Line","title":"Manage R Configuration at the Command Line","text":"Manage R Configuration Command Line Manage R configuration using files (JSON, YAML, separated text) JSON strings command line arguments. Command line arguments can used override configuration. Period-separated command line flags parsed hierarchical lists.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Manage R Configuration at the Command Line","text":"","code":"remotes::install_packages(\"analythium/rconfig\")"},{"path":"/index.html","id":"another-config-package","dir":"","previous_headings":"","what":"Another config package?","title":"Manage R Configuration at the Command Line","text":"R packages manage configs: config nice inheritance rules, even scans parent directories YAML config files configr nice substitution/interpolation features supports YAML, JSON, TOML, INI file formats package fantastic managing deployments different stages life cycle, .e. testing/staging/production. However, use Rscript command line, often want manage many configuration files, want quick way override default settings. rconfig package provides various ways override defaults, instead changing active configuration (config package), can merge lists order arrive final configuration. similar concepts, quite . rconfig package following features: uses default configuration file file based override -f --file flags (accepts JSON, YAML, plain text files) JSON string based override -j --json flags command line arguments merged , e.g. --cores 4 heuristic rules used coerce command line values right type R expressions starting !expr evaluated default, behavior can turned (feature can found yaml config packages, works plain text JSON ) period-separated command line arguments parsed hierarchical lists, e.g. --user.name Joe added user$name config list nested configurations can also flattened command line flags without value evaluate TRUE, e.g. --verbose yet convinced, quick teaser. content default configuration file, rconfig.yml: Let’s use simple R script print configs: Now can override default configuration using another file, JSON string, flags. Notice variable substitution user name! package inspired config package, docker-compose/kubectl/caddy CLI tools, motivated real world need managing background processing cloud instances.","code":"trials: 5 dataset: \"demo-data.csv\" cores: !expr getOption(\"mc.cores\", 1L) user:   name: \"demo\" #!/usr/bin/env Rscript str(rconfig::rconfig()) export USER=Jane  Rscript --vanilla test.R \\   -f rconfig-prod.yml \\   -j '{\"trials\":30,\"dataset\":\"full-data.csv\"}' \\   --user.name $USER \\   --verbose  # List of 5 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"Jane\" #  $ verbose: logi TRUE"},{"path":[]},{"path":"/index.html","id":"r-command-line-usage","dir":"","previous_headings":"Usage","what":"R command line usage","title":"Manage R Configuration at the Command Line","text":"Open project RStudio set work directory folder root cloning/downloading repo. Using alongside config package:","code":"## no default found str(rconfig::rconfig())  ## use a list override str(rconfig::rconfig(list = list(a = 1)))  ## Try different YAML files str(rconfig::rconfig(file = \"inst/examples/rconfig.yml\")) str(rconfig::rconfig(file = \"inst/examples/rconfig-prod.yml\"))  ## prod config overrides the default str(rconfig::rconfig(file = c(     \"inst/examples/rconfig.yml\",     \"inst/examples/rconfig-prod.yml\")))  ## a list overrides the prod that overrides the default str(rconfig::rconfig(file = c(     \"inst/examples/rconfig.yml\",     \"inst/examples/rconfig-prod.yml\"),     list = list(user = list(name = \"Jack\"))))  ## Parse YAML from URL str(rconfig::rconfig(file = \"https://raw.githubusercontent.com/analythium/docker-compose-shiny-example/main/docker-compose.yml\"))  ## Use a JSON file str(rconfig::rconfig(file = \"inst/examples/rconfig.json\")) str(rconfig::rconfig(file = \"inst/examples/rconfig-prod.json\")) str(rconfig::rconfig(file = c(     \"inst/examples/rconfig.json\",     \"inst/examples/rconfig-prod.json\")))  ## Use a text file str(rconfig::rconfig(file = \"inst/examples/rconfig.txt\")) str(rconfig::rconfig(file = \"inst/examples/rconfig-prod.txt\")) str(rconfig::rconfig(file = c(     \"inst/examples/rconfig.txt\",     \"inst/examples/rconfig-prod.txt\")))  ## Evaluating R expressions (!expr) options(\"rconfig.eval\"=FALSE) str(rconfig::rconfig(file = \"inst/examples/rconfig.yml\")) str(rconfig::rconfig(file = \"inst/examples/rconfig.json\")) options(\"rconfig.eval\"=NULL) str(rconfig::rconfig(file = \"inst/examples/rconfig.yml\")) str(rconfig::rconfig(file = \"inst/examples/rconfig.json\")) conf <- config::get(     config = \"production\",     file = \"inst/examples/config.yml\",     use_parent = FALSE)  str(rconfig::rconfig(     file = \"inst/examples/rconfig.yml\",     list = conf))"},{"path":"/index.html","id":"using-with-rscript","dir":"","previous_headings":"Usage","what":"Using with Rscript","title":"Manage R Configuration at the Command Line","text":"Set work directory inst/examples folder cloning/downloading repo.","code":"## Default config if found Rscript test.R  ## Default with debug mode on R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R  ## Change defult config file R_RCONFIG_FILE=\"rconfig-prod.yml\" Rscript test.R  ## Change defult config file and debug on R_RCONFIG_FILE=\"rconfig-prod.yml\" R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R  ## Use file and other props to override default Rscript test.R -f rconfig-prod.yml --user.name \"unreal_Zh5z*$#=\"  ## Use JSON string and other props to override default Rscript test.R -j '{\"trials\":30,\"dataset\":\"full-data.csv\",\"user\":{\"name\": \"real_We4$#z*=\"}}' --user.name \"unreal_Zh5z*$#=\""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Manage R Configuration at the Command Line","text":"MIT License Copyright (c) 2022 Peter Solymos Analythium Solutions Inc.","code":""},{"path":"/reference/rconfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage R Configuration at the Command Line — rconfig","title":"Manage R Configuration at the Command Line — rconfig","text":"Manage R configuration using files (JSON, YAML, separated text) JSON strings command line arguments. Command line arguments can used override configuration. Period-separated command line flags parsed hierarchical lists.","code":""},{"path":"/reference/rconfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"rconfig(   file = NULL,   list = NULL,   eval = TRUE,   flatten = FALSE,   debug = FALSE,   sep = \"=\",   ... )"},{"path":"/reference/rconfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage R Configuration at the Command Line — rconfig","text":"file Configuration file name URL (NULL use configuration file override default behavior). Can vector, case element treated configuration file, parsed applied order appear. list list override configs (NULL use list override default behavior). argument treated single configuration (opposed file). eval Logical, evaluate !expr R expressions. flatten Logical, config contain nested lists results flat, .e. $b$c flattened key .b.c; like unlist() returning list preserving value types. debug Logical, debug mode configuration source information attached \"trace\" attribute. sep Character, separator text files. ... arguments passed file parsers: yaml::yaml.load_file() YAML, jsonlite::fromJSON() JSON, utils::read.table() text files.","code":""},{"path":"/reference/rconfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage R Configuration at the Command Line — rconfig","text":"configuration value (named list, empty list). debug mode , \"trace\" attribute traces merged configurations.","code":""},{"path":"/reference/rconfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage R Configuration at the Command Line — rconfig","text":"Merges configuration parsing files, JSON strings, command line arguments. Configurations merged following order (key-values last element override previous values key): R_RCONFIG_FILE value \"rconfig.yml\" JSON strings (following -j --json flags) files (following -f --file flags) provided command line arguments parsed applied order appear (key-value pars separated space, atomic values considered, .e. file name string) remaining command line arguments, period-separated command line flags parsed hierarchical lists (key-value pars separated space, flags must begin --, values treated vectors contain spaces) configuration file argument (one multiple files, parsed applied order appear) configuration list argument following environment variables options can set modify default behavior: R_RCONFIG_FILE: location default configuration file, assumed rconfig.yml current working directory. file name can URL can can missing. R_RCONFIG_EVAL: coerced logical, indicating whether R expressions starting !expr evaluated namespace environment base package (overrides value getOption(\"rconfig.eval\")). set value assumed TRUE. R_RCONFIG_FLATTEN: coerced logical, flatten nested lists, .e. $b$c becomes key .b.c (overrides value getOption(\"rconfig.flatten\")). set value assumed FALSE. R_RCONFIG_DEBUG: coerced logical, turn debug mode (overrides value getOption(\"rconfig.debug\")). set value assumed FALSE. R_RCONFIG_SEP: separator text file parser, (overrides value getOption(\"rconfig.sep\")). set value assumed \"=\". configuration file (file name can also URL), can nested structure JSON, YAML format. text files parsed using separator (R_RCONFIG_SEP getOption(\"rconfig.sep\")) period-separated keys parsed hierarchical lists (.e. .b.c=12 treated $b$c = 12). configuration file JSON string, values starting !expr evaluated depending settings R_RCONFIG_EVAL getOption(\"rconfig.eval\"). E.g. cores: !expr getOption(\"mc.cores\"), etc. additional details see package website https://github.com/analythium/rconfig.","code":""},{"path":[]},{"path":"/reference/rconfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"cfile <- function(file) {     system.file(\"examples\", file, package = \"rconfig\") }  rconfig::rconfig() #> list() #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = cfile(\"rconfig.yml\")) #> $trials #> [1] 5 #>  #> $dataset #> [1] \"demo-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"demo\" #>  #>  #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\"))) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"Jack\" #>  #>  #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\")),     flatten = TRUE) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user.name #> [1] \"Jack\" #>  #> attr(,\"class\") #> [1] \"rconfig\""}]
