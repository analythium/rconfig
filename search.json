[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Analythium Solutions Inc.. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P (2022). rconfig: Manage R Configuration Command Line. R package version 0.1.2, https://github.com/analythium/rconfig.","code":"@Manual{,   title = {rconfig: Manage R Configuration at the Command Line},   author = {Peter Solymos},   year = {2022},   note = {R package version 0.1.2},   url = {https://github.com/analythium/rconfig}, }"},{"path":"/index.html","id":"rconfig","dir":"","previous_headings":"","what":"Manage R Configuration at the Command Line","title":"Manage R Configuration at the Command Line","text":"Manage R Configuration Command Line  Manage R configuration using files (JSON, YAML, separated text) JSON strings command line arguments. Command line arguments can used override configuration. Period-separated command line flags parsed hierarchical lists. Try rconfig browser: click Gitpod button, cd inst/examples VS Code terminal run Rscript example README!","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Manage R Configuration at the Command Line","text":"","code":"remotes::install_packages(\"analythium/rconfig\")"},{"path":"/index.html","id":"another-config-package","dir":"","previous_headings":"","what":"Another config package?","title":"Manage R Configuration at the Command Line","text":"R packages manage configs: config nice inheritance rules, even scans parent directories YAML config files configr nice substitution/interpolation features supports YAML, JSON, TOML, INI file formats package fantastic managing deployments different stages life cycle, .e. testing/staging/production. However, use Rscript command line, often want manage many configuration files, want quick way override default settings. rconfig package provides various ways override defaults, instead changing active configuration (config package), can merge lists order arrive final configuration. similar concepts, quite . rconfig package following features: uses default configuration file file based override -f --file flags (accepts JSON, YAML, plain text files) JSON string based override -j --json flags command line arguments merged , e.g. --cores 4 heuristic rules used coerce command line values right type R expressions starting !expr evaluated default, behavior can turned (feature can found yaml config packages, works plain text JSON ) period-separated command line arguments parsed hierarchical lists, e.g. --user.name Joe added user$name config list nested configurations can also flattened command line flags without value evaluate TRUE, e.g. --verbose looks similar litter, getopt, optparse supposed . right. packages offer amazing command line experience solid interface. iterative evolving research development situation, however, rconfig gives agility. yet convinced, quick teaser. content default configuration file, rconfig.yml: Let’s use simple R script print configs: Now can override default configuration using another file, JSON string, flags. Notice variable substitution user name! package inspired config package, docker-compose/kubectl/caddy CLI tools, motivated real world need managing background processing cloud instances.","code":"# trials: 5 # dataset: \"demo-data.csv\" # cores: !expr getOption(\"mc.cores\", 1L) # user: #   name: \"demo\" # #!/usr/bin/env Rscript # options(\"rconfig.debug\"=TRUE) # str(rconfig::rconfig()) export USER=Jane  Rscript --vanilla test.R \\   -f rconfig-prod.yml \\   -j '{\"trials\":30,\"dataset\":\"full-data.csv\"}' \\   --user.name $USER \\   --verbose # List of 5 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"Jane\" #  $ verbose: logi TRUE #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 4 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig-prod.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"json\" #   .. .. ..$ value: chr \"{\\\"trials\\\":30,\\\"dataset\\\":\\\"full-data.csv\\\"}\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"--user.name Jane --verbose\" #  - attr(*, \"class\")= chr \"rconfig\""},{"path":[]},{"path":"/index.html","id":"r-command-line-usage","dir":"","previous_headings":"Usage","what":"R command line usage","title":"Manage R Configuration at the Command Line","text":"Open project RStudio set work directory folder root cloning/downloading repository. Set defaults case values undefined: Using alongside config package:","code":"str(rconfig::rconfig()) # List of 4 #  $ trials : int 5 #  $ dataset: chr \"demo-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"demo\" #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = \"rconfig-prod.yml\")) # List of 4 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = c(\"rconfig.json\",              \"rconfig-prod.txt\"),     list = list(user = list(name = \"Jack\")))) # List of 4 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"Jack\" #  - attr(*, \"class\")= chr \"rconfig\"  str(rconfig::rconfig(     file = c(\"rconfig.json\",              \"rconfig-prod.txt\"),     list = list(user = list(name = \"Jack\")),     flatten = TRUE)) # List of 4 #  $ trials   : int 30 #  $ dataset  : chr \"full-data.csv\" #  $ cores    : int 1 #  $ user.name: chr \"Jack\" #  - attr(*, \"class\")= chr \"rconfig\" CONFIG <- rconfig::rconfig(     file = \"rconfig-prod.yml\")  rconfig::value(CONFIG$cores, 2L)   # set to 1L # [1] 1 rconfig::value(CONFIG$test, FALSE) # unset # [1] FALSE conf <- config::get(     config = \"production\",     file = \"config.yml\",     use_parent = FALSE)  str(rconfig::rconfig(     file = \"rconfig.yml\",     list = conf)) # List of 4 #  $ trials : int 30 #  $ dataset: chr \"data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"demo\" #  - attr(*, \"class\")= chr \"rconfig\""},{"path":"/index.html","id":"using-with-rscript","dir":"","previous_headings":"Usage","what":"Using with Rscript","title":"Manage R Configuration at the Command Line","text":"Set work directory inst/examples folder cloning/downloading repo. Default config found (script debug mode ): Default debug mode : Change default config file: Change default config file debug : Use file props override default: Use JSON string props override default: realistic still small example, let’s use iris data get summaries species using command line arguments: Check iris_rlog.R file see example proper logging. Another illustration using mtcars data set fit linear models different variables:","code":"Rscript test.R # List of 4 #  $ trials : int 5 #  $ dataset: chr \"demo-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"demo\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"file\" #   ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig.yml\" #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R # List of 4 #  $ trials : int 5 #  $ dataset: chr \"demo-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"demo\" #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_FILE=\"rconfig-prod.yml\" Rscript test.R # List of 3 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ user   :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"file\" #   ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig-prod.yml\" #  - attr(*, \"class\")= chr \"rconfig\" R_RCONFIG_FILE=\"rconfig-prod.yml\" R_RCONFIG_DEBUG=\"FALSE\" Rscript test.R # List of 3 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ user   :List of 1 #   ..$ name: chr \"real_We4$#z*=\" #  - attr(*, \"class\")= chr \"rconfig\" Rscript test.R -f rconfig-prod.yml --user.name \"unreal_Zh5z*$#=\" # List of 4 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"unreal_Zh5z*0=\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 3 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig-prod.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"--user.name unreal_Zh5z*0=\" #  - attr(*, \"class\")= chr \"rconfig\" Rscript test.R \\   -j '{\"trials\":30,\"dataset\":\"full-data.csv\",\"user\":{\"name\": \"real_We4$#z*=\"}}' \\   --user.name \"unreal_Zh5z*$#=\" # List of 4 #  $ trials : int 30 #  $ dataset: chr \"full-data.csv\" #  $ cores  : int 1 #  $ user   :List of 1 #   ..$ name: chr \"unreal_Zh5z*0=\" #  - attr(*, \"trace\")=List of 2 #   ..$ kind : chr \"merged\" #   ..$ value:List of 3 #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"file\" #   .. .. ..$ value: chr \"/Users/Peter/dev/rconfig/inst/examples/rconfig.yml\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"json\" #   .. .. ..$ value: chr \"{\\\"trials\\\":30,\\\"dataset\\\":\\\"full-data.csv\\\",\\\"user\\\":{\\\"name\\\": \\\"real_We4$#z*=\\\"}}\" #   .. ..$ :List of 2 #   .. .. ..$ kind : chr \"args\" #   .. .. ..$ value: chr \"--user.name unreal_Zh5z*0=\" #  - attr(*, \"class\")= chr \"rconfig\" Rscript iris.R --species virginica #   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #  Min.   :4.900   Min.   :2.200   Min.   :4.500   Min.   :1.400   #  1st Qu.:6.225   1st Qu.:2.800   1st Qu.:5.100   1st Qu.:1.800   #  Median :6.500   Median :3.000   Median :5.550   Median :2.000   #  Mean   :6.588   Mean   :2.974   Mean   :5.552   Mean   :2.026   #  3rd Qu.:6.900   3rd Qu.:3.175   3rd Qu.:5.875   3rd Qu.:2.300   #  Max.   :7.900   Max.   :3.800   Max.   :6.900   Max.   :2.500 Rscript iris.R --species setosa --verbose # 2022-04-14 21:57:45 - Started # Getting summaries for species setosa #   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    #  Min.   :4.300   Min.   :2.300   Min.   :1.000   Min.   :0.100   #  1st Qu.:4.800   1st Qu.:3.200   1st Qu.:1.400   1st Qu.:0.200   #  Median :5.000   Median :3.400   Median :1.500   Median :0.200   #  Mean   :5.006   Mean   :3.428   Mean   :1.462   Mean   :0.246   #  3rd Qu.:5.200   3rd Qu.:3.675   3rd Qu.:1.575   3rd Qu.:0.300   #  Max.   :5.800   Max.   :4.400   Max.   :1.900   Max.   :0.600   # 2022-04-14 21:57:45 - Done Rscript iris.R --species maxima --verbose # 2022-04-14 21:57:46 - Started # Error: Provide a valid species # Execution halted Rscript iris.R # Error: Species not provided # Execution halted Rscript mtcars.R # (Intercept)         cyl        disp          hp        drat          wt  # 12.30337416 -0.11144048  0.01333524 -0.02148212  0.78711097 -3.71530393  #        qsec          vs          am        gear        carb  #  0.82104075  0.31776281  2.52022689  0.65541302 -0.19941925 Rscript mtcars.R --verbose --vars cyl # 2022-04-14 21:57:46 - Started # (Intercept)         cyl  #    37.88458    -2.87579  # 2022-04-14 21:57:46 - Done Rscript mtcars.R --verbose --vars cal # 2022-04-14 21:57:47 - Started # Error: Not valid variable # Execution halted Rscript mtcars.R --vars cyl disp hp # (Intercept)         cyl        disp          hp  # 34.18491917 -1.22741994 -0.01883809 -0.01467933"},{"path":"/index.html","id":"shiny","dir":"","previous_headings":"Usage","what":"Shiny","title":"Manage R Configuration at the Command Line","text":"example configure Shiny app command line flags: example configure Shiny app using golem command line flags:","code":"Rscript shiny/app.R  Rscript shiny/app.R \\   --test \\   --value 1000 \\   --color 'pink' \\   --title 'Only Testing' # app.R CONFIG <- rconfig() yourpkg::run_app(   title = value(CONFIG$title, \"Hello Shiny!\"),   test = value(CONFIG$test, FALSE),   color = value(CONFIG$color, \"purple\"),   options = list(port = value(CONFIG$port, 8080)))  ## then in terminal Rscript app.R \\   --test \\   --value 1000 \\   --color 'pink' \\   --title 'Only Testing' \\   --port 3838"},{"path":"/index.html","id":"plumber","dir":"","previous_headings":"Usage","what":"Plumber","title":"Manage R Configuration at the Command Line","text":"example configure Plumber API command line flags:","code":"cd plumber  Rscript index.R  # httr::POST(\"http://127.0.0.1:8080/echo?msg=Cool\") |> httr::content() # httr::GET(\"http://127.0.0.1:8080/test\") |> httr::content()  Rscript index.R \\   --test \\   --port 8000 \\   --title 'The echoed message is'  # httr::POST(\"http://127.0.0.1:8000/echo?msg=Cool\") |> httr::content() # httr::GET(\"http://127.0.0.1:8000/test\") |> httr::content()"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Manage R Configuration at the Command Line","text":"MIT License © 2022 Peter Solymos Analythium Solutions Inc.","code":""},{"path":"/reference/rconfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage R Configuration at the Command Line — rconfig","title":"Manage R Configuration at the Command Line — rconfig","text":"Manage R configuration using files (JSON, YAML, separated text) JSON strings command line arguments. Command line arguments can used override configuration. Period-separated command line flags parsed hierarchical lists.","code":""},{"path":"/reference/rconfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"rconfig(   file = NULL,   list = NULL,   eval = NULL,   flatten = NULL,   debug = NULL,   sep = NULL,   ... )  value(x, ...)  # S3 method for default value(x, default = NULL, ...)"},{"path":"/reference/rconfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage R Configuration at the Command Line — rconfig","text":"file Configuration file name URL (NULL use configuration file override default behavior). Can vector, case element treated configuration file, parsed applied order appear. list list override configs (NULL use list override default behavior). argument treated single configuration (opposed file). List names need unique. eval Logical, evaluate !expr R expressions. flatten Logical, config contain nested lists results flat, .e. $b$c flattened key .b.c; like unlist() returning list preserving value types. debug Logical, debug mode configuration source information attached \"trace\" attribute. sep Character, separator text files. ... arguments passed file parsers: yaml::yaml.load_file() YAML, jsonlite::fromJSON() JSON, utils::read.table() text files. x list, e.g. rconfig() output. default default value used configuration entry set.","code":""},{"path":"/reference/rconfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage R Configuration at the Command Line — rconfig","text":"configuration value (named list, empty list). debug mode , \"trace\" attribute traces merged configurations.","code":""},{"path":"/reference/rconfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manage R Configuration at the Command Line — rconfig","text":"Merges configuration parsing files, JSON strings, command line arguments. Note rconfig considers trailing command line arguments Rscript. Configurations merged following order (key-values last element override previous values key): R_RCONFIG_FILE value \"rconfig.yml\" working directory JSON strings (following -j --json flags) files (following -f --file flags) provided command line arguments parsed applied order appear (key-value pairs separated space, atomic values considered, .e. file name string) flag, multiple file/JSON flags accepted sequence remaining command line arguments, period-separated command line flags parsed hierarchical lists (key-value pairs separated space, flags must begin --, values treated vectors contain spaces, .e. --key 1 2 3) configuration file argument (one multiple files, parsed applied order appear) configuration list argument following environment variables options can set modify default behavior: R_RCONFIG_FILE: location default configuration file, assumed rconfig.yml current working directory. file name can URL can can missing. R_RCONFIG_EVAL: coerced logical, indicating whether R expressions starting !expr evaluated namespace environment base package (overrides value getOption(\"rconfig.eval\")). set value assumed TRUE. R_RCONFIG_FLATTEN: coerced logical, flatten nested lists, .e. $b$c becomes key .b.c (overrides value getOption(\"rconfig.flatten\")). set value assumed FALSE. R_RCONFIG_DEBUG: coerced logical, turn debug mode (overrides value getOption(\"rconfig.debug\")). set value assumed FALSE. R_RCONFIG_SEP: separator text file parser, (overrides value getOption(\"rconfig.sep\")). set value assumed \"=\". configuration file (file name can also URL), can nested structure JSON YAML format. text files parsed using separator (R_RCONFIG_SEP getOption(\"rconfig.sep\")) period-separated keys parsed hierarchical lists (.e. .b.c=12 treated $b$c = 12) default. configuration file JSON string, values starting !expr evaluated depending settings R_RCONFIG_EVAL getOption(\"rconfig.eval\"). E.g. cores: !expr getOption(\"mc.cores\"), etc. additional details see package website https://github.com/analythium/rconfig.","code":""},{"path":[]},{"path":"/reference/rconfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage R Configuration at the Command Line — rconfig","text":"","code":"cfile <- function(file) {     system.file(\"examples\", file, package = \"rconfig\") }  rconfig::rconfig() #> list() #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = cfile(\"rconfig.yml\")) #> $trials #> [1] 5 #>  #> $dataset #> [1] \"demo-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"demo\" #>  #>  #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\"))) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user #> $user$name #> [1] \"Jack\" #>  #>  #> attr(,\"class\") #> [1] \"rconfig\"  rconfig::rconfig(     file = c(cfile(\"rconfig.json\"),              cfile(\"rconfig-prod.txt\")),     list = list(user = list(name = \"Jack\")),     flatten = TRUE) #> $trials #> [1] 30 #>  #> $dataset #> [1] \"full-data.csv\" #>  #> $cores #> [1] 1 #>  #> $user.name #> [1] \"Jack\" #>  #> attr(,\"class\") #> [1] \"rconfig\"  CONFIG <- rconfig::rconfig(     file = cfile(\"rconfig.yml\")) value(CONFIG$cores, 2L)   # set to 1L #> [1] 1 value(CONFIG$test, FALSE) # unset #> [1] FALSE"},{"path":"/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.1.2","title":"Version 0.1.2","text":"Added value() method (#2).","code":""},{"path":"/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"CRAN release: 2022-02-21 Added LICENSE.md explicit MIT text LICENSE 2 lines .","code":""},{"path":"/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"First (failed) CRAN submission.","code":""}]
